---
interface Props {
    titulo: string;
    texto: string;
    precio: string;
    imagenes: { base64: string; lcpi: string; original: string };
    categoria: string;
    colorCategoria: string;
    url: string;
    index: number;
}

const {
    titulo,
    texto,
    precio,
    imagenes,
    categoria,
    colorCategoria,
    url,
    index,
} = Astro.props;

const { base64, original } = imagenes;
---

<div
    class=`Card`
    data-categoria={categoria}
    style=`--colorCategoria : ${colorCategoria}`
>
    <a
        href={`/programas-estudio/${url}`}
        style="overflow: hidden; display: block;"
    >
    {
        index === 0 ?

        <img
            class='Card__imagen1'
            src={original}
            style={`background-image: url(${base64})`}
            alt={`${titulo} - IISEP`}
        />

        :
        <img
            class='Card__imagen'
            data-srcx={original}
            style={`background-image: url(${base64})`}
            alt={`${titulo} - IISEP`}
        />

    }
        
    </a>
    <div class="Card__Contenido">
        <a href={`/programas-estudio/${url}`} class="Card__titulo">
            <h3>{titulo}</h3>
        </a>
        <p class="Card__texto">{texto}</p>
        <h3 class="Card__precio">
            S/{precio}
            <span class="small"> /mes</span>
        </h3>
        <del class="Card__tach">S/{parseInt(precio) * 2}</del>
        <h3 class="Card__descuento">50%</h3>
    </div>
</div>

<style lang="scss">
    .Card {
        background-color: rgb(255, 255, 255);
        display: grid;
        gap: 1rem;
        position: relative;
        overflow-x: hidden;
        border-radius: 1rem;
        box-shadow: 0 0 5px 2px rgb(237, 236, 236);
        content-visibility: auto;

        &__imagen,
        &__imagen1 {
            
            aspect-ratio: 16/9;
            transform: scale(1.05);
            transition: transform 0.6s;

            &:hover {
                transform: scale(1.2);
            }
        }

        &::after {
            content: attr(data-categoria);
            display: block;
            position: absolute;
            top: 3%;
            left: -2%;
            background-color: var(--colorCategoria);
            padding: 0.4rem 2rem;
            border-top-right-radius: 100vh;
            border-bottom-right-radius: 100vh;
            color: white;
            font-weight: 700;
        }
    }

    .Card__Contenido {
        padding-inline: 1rem;
        padding-bottom: 1rem;
        align-content: baseline;
        display: grid;
        grid-template-columns: auto auto 1fr;
        grid-template-areas:
            "Titulo Titulo Titulo"
            "Texto Texto Texto"
            "Precio Tach Boton";
        gap: 1rem;
    }

    .Card__titulo {
        grid-area: Titulo;
        color: black;
    }
    .Card__texto {
        grid-area: Texto;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 4;
        overflow: hidden;
    }
    .Card__precio {
        grid-area: Precio;
        align-self: center;
        display: flex;
        align-items: baseline;
        gap: 0.2rem;
    }
    .Card__descuento {
        grid-area: Boton;
        justify-self: end;
        display: block;
        background-color: rgb(255, 17, 17);
        color: white;
        width: max-content;
        padding: 0.4rem 1rem;
        border-radius: 0.4rem;
    }

    .Card__tach {
        grid-area: Tach;
        align-self: center;
        opacity: 0.7;
        line-height: normal;
    }
</style>

<script>
    document.addEventListener("astro:page-load", function () {
        // Obtener todas las im√°genes con la clase 'lazy-img'

        

        const images =
            document.querySelectorAll<HTMLImageElement>(".Card__imagen");

        const imgOptions = {
            rootMargin: `0px 0px 300px 0px`,
        };
        const imgObserver = new IntersectionObserver((entries, imgObserver) => {
            entries.forEach((entry) => {
                if (!entry.isIntersecting) return;

                const img = entry.target as HTMLImageElement;
                img.src = img.getAttribute("data-srcx");
                console.log("imagen cargada", img.getAttribute("data-srcx"));
                imgObserver.unobserve(entry.target);
            });
        }, imgOptions);

        images.forEach((img) => {
            imgObserver.observe(img);
        });
    });
</script>
